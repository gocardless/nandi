Add multi-database support with database declaration syntax

Implements comprehensive multi-database support for Nandi, enabling
developers to organize migrations across multiple databases (primary,
analytics, read replicas) while maintaining zero breaking changes.

Features:
â€¢ Database-specific migration directories and output paths
â€¢ `database :name` declaration syntax in migration classes  
â€¢ Enhanced generators with --database option
â€¢ Database-aware lockfile management with backward compatibility
â€¢ Comprehensive test coverage and integration tests

Configuration:
```ruby
Nandi.configure do |config|
  config.databases = {
    primary: { migration_directory: "db/safe_migrations/primary" },
    analytics: { 
      migration_directory: "db/safe_migrations/analytics",
      output_directory: "db/migrate/analytics"
    }
  }
end
```

Usage:
```ruby
class CreateUsersTable < Nandi::Migration
  database :primary
  def up
    create_table :users do |t|
      t.text :name
    end
  end
end
```

Generators:
```bash
rails generate nandi:migration create_reports --database=analytics
rails generate nandi:compile  # Compiles all databases
```

Implementation Details:
â€¢ Extended Config with databases hash and directory resolution methods
â€¢ Enhanced Migration class with database targeting capability
â€¢ Updated Lockfile system with database-prefixed keys and fallbacks
â€¢ Modified CompiledMigration for database-aware output routing
â€¢ Enhanced generators for database-specific migration creation
â€¢ Comprehensive test suite covering all functionality

Backward Compatibility:
â€¢ Zero breaking changes - existing single-database projects unchanged
â€¢ All existing APIs work exactly as before
â€¢ Existing lockfiles and migrations require no modification
â€¢ Optional feature - activates only when configured

Resolves: #137

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>